/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TodosRouteImport } from './routes/todos'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ChatThreadRouteImport } from './routes/chat.$threadId'
import { Route as NewChatRouteImport } from './routes/chat.new'

const TodosRoute = TodosRouteImport.update({
  id: '/todos',
  path: '/todos',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatThreadRoute = ChatThreadRouteImport.update({
  id: '/chat/$threadId',
  path: '/chat/$threadId',
  getParentRoute: () => rootRouteImport,
} as any)
const NewChatRoute = NewChatRouteImport.update({
  id: '/chat/new',
  path: '/chat/new',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/todos': typeof TodosRoute
  '/chat/$threadId': typeof ChatThreadRoute
  '/chat/new': typeof NewChatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/todos': typeof TodosRoute
  '/chat/$threadId': typeof ChatThreadRoute
  '/chat/new': typeof NewChatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/todos': typeof TodosRoute
  '/chat/$threadId': typeof ChatThreadRoute
  '/chat/new': typeof NewChatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/todos' | '/chat/$threadId' | '/chat/new'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/todos' | '/chat/$threadId' | '/chat/new'
  id: '__root__' | '/' | '/todos' | '/chat/$threadId' | '/chat/new'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TodosRoute: typeof TodosRoute
  ChatThreadRoute: typeof ChatThreadRoute
  NewChatRoute: typeof NewChatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/todos': {
      id: '/todos'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof TodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chat/$threadId': {
      id: '/chat/$threadId'
      path: '/chat/$threadId'
      fullPath: '/chat/$threadId'
      preLoaderRoute: typeof ChatThreadRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chat/new': {
      id: '/chat/new'
      path: '/chat/new'
      fullPath: '/chat/new'
      preLoaderRoute: typeof NewChatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TodosRoute: TodosRoute,
  ChatThreadRoute: ChatThreadRoute,
  NewChatRoute: NewChatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
